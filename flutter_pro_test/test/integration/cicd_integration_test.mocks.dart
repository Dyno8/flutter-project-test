// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_pro_test/test/integration/cicd_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_pro_test/core/performance/build_optimizer.dart' as _i6;
import 'package:flutter_pro_test/core/performance/performance_manager.dart'
    as _i7;
import 'package:flutter_pro_test/core/security/advanced_security_manager.dart'
    as _i2;
import 'package:flutter_pro_test/core/security/security_compliance_manager.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSecurityHealthReport_0 extends _i1.SmartFake
    implements _i2.SecurityHealthReport {
  _FakeSecurityHealthReport_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSecurityAuditReport_1 extends _i1.SmartFake
    implements _i3.SecurityAuditReport {
  _FakeSecurityAuditReport_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeComplianceStatus_2 extends _i1.SmartFake
    implements _i3.ComplianceStatus {
  _FakeComplianceStatus_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AdvancedSecurityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdvancedSecurityManager extends _i1.Mock
    implements _i2.AdvancedSecurityManager {
  MockAdvancedSecurityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool verifyCertificatePin(String? host, String? certificateHash) =>
      (super.noSuchMethod(
            Invocation.method(#verifyCertificatePin, [host, certificateHash]),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<String> encryptDataAdvanced(String? data, {String? customKey}) =>
      (super.noSuchMethod(
            Invocation.method(
              #encryptDataAdvanced,
              [data],
              {#customKey: customKey},
            ),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(
                  #encryptDataAdvanced,
                  [data],
                  {#customKey: customKey},
                ),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> decryptDataAdvanced(
    String? encryptedData, {
    String? customKey,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #decryptDataAdvanced,
              [encryptedData],
              {#customKey: customKey},
            ),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(
                  #decryptDataAdvanced,
                  [encryptedData],
                  {#customKey: customKey},
                ),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  List<Map<String, dynamic>> getSecurityViolations() =>
      (super.noSuchMethod(
            Invocation.method(#getSecurityViolations, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.SecurityHealthReport> performSecurityHealthCheck() =>
      (super.noSuchMethod(
            Invocation.method(#performSecurityHealthCheck, []),
            returnValue: _i4.Future<_i2.SecurityHealthReport>.value(
              _FakeSecurityHealthReport_0(
                this,
                Invocation.method(#performSecurityHealthCheck, []),
              ),
            ),
          )
          as _i4.Future<_i2.SecurityHealthReport>);
}

/// A class which mocks [SecurityComplianceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecurityComplianceManager extends _i1.Mock
    implements _i3.SecurityComplianceManager {
  MockSecurityComplianceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.SecurityAuditReport> performSecurityAudit() =>
      (super.noSuchMethod(
            Invocation.method(#performSecurityAudit, []),
            returnValue: _i4.Future<_i3.SecurityAuditReport>.value(
              _FakeSecurityAuditReport_1(
                this,
                Invocation.method(#performSecurityAudit, []),
              ),
            ),
          )
          as _i4.Future<_i3.SecurityAuditReport>);

  @override
  List<_i3.SecurityAuditReport> getComplianceReports() =>
      (super.noSuchMethod(
            Invocation.method(#getComplianceReports, []),
            returnValue: <_i3.SecurityAuditReport>[],
          )
          as List<_i3.SecurityAuditReport>);

  @override
  _i4.Future<_i3.ComplianceStatus> checkComplianceStatus(
    _i3.ComplianceStandard? standard,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#checkComplianceStatus, [standard]),
            returnValue: _i4.Future<_i3.ComplianceStatus>.value(
              _FakeComplianceStatus_2(
                this,
                Invocation.method(#checkComplianceStatus, [standard]),
              ),
            ),
          )
          as _i4.Future<_i3.ComplianceStatus>);
}

/// A class which mocks [BuildOptimizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildOptimizer extends _i1.Mock implements _i6.BuildOptimizer {
  MockBuildOptimizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> getOptimizationStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getOptimizationStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<void> applyRuntimeOptimizations() =>
      (super.noSuchMethod(
            Invocation.method(#applyRuntimeOptimizations, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void forceGarbageCollection() => super.noSuchMethod(
    Invocation.method(#forceGarbageCollection, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> clearCaches() =>
      (super.noSuchMethod(
            Invocation.method(#clearCaches, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> getPerformanceMetrics() =>
      (super.noSuchMethod(
            Invocation.method(#getPerformanceMetrics, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [PerformanceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceManager extends _i1.Mock
    implements _i7.PerformanceManager {
  MockPerformanceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void cacheData(String? key, dynamic data, {Duration? expiration}) =>
      super.noSuchMethod(
        Invocation.method(#cacheData, [key, data], {#expiration: expiration}),
        returnValueForMissingStub: null,
      );

  @override
  T? getCachedData<T>(String? key) =>
      (super.noSuchMethod(Invocation.method(#getCachedData, [key])) as T?);

  @override
  bool isCached(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isCached, [key]),
            returnValue: false,
          )
          as bool);

  @override
  void clearCache(String? key) => super.noSuchMethod(
    Invocation.method(#clearCache, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void clearAllCache() => super.noSuchMethod(
    Invocation.method(#clearAllCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void recordEvent(
    String? name, {
    Duration? duration,
    Map<String, dynamic>? metadata,
  }) => super.noSuchMethod(
    Invocation.method(
      #recordEvent,
      [name],
      {#duration: duration, #metadata: metadata},
    ),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getPerformanceStats() =>
      (super.noSuchMethod(
            Invocation.method(#getPerformanceStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  List<_i7.PerformanceEvent> getRecentEvents({int? limit = 50}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentEvents, [], {#limit: limit}),
            returnValue: <_i7.PerformanceEvent>[],
          )
          as List<_i7.PerformanceEvent>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
